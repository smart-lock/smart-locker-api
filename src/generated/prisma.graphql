# source: http://localhost:4466
# timestamp: Thu Sep 20 2018 17:32:40 GMT-0300 (-03)

type AggregateLocker {
  count: Int!
}

type AggregateLockerCluster {
  count: Int!
}

type AggregateLockerSession {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Locker implements Node {
  id: ID!
  cluster(where: LockerClusterWhereInput): LockerCluster
  busy: Boolean!
  locked: Boolean!
  open: Boolean!
  sensorPin: Int!
  alarmPin: Int!
  lockPin: Int!
}

type LockerCluster implements Node {
  id: ID!
  lockers(where: LockerWhereInput, orderBy: LockerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Locker!]
  macAddress: String!
}

"""A connection to a list of items."""
type LockerClusterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LockerClusterEdge]!
  aggregate: AggregateLockerCluster!
}

input LockerClusterCreateInput {
  macAddress: String!
  lockers: LockerCreateManyWithoutClusterInput
}

input LockerClusterCreateOneWithoutLockersInput {
  create: LockerClusterCreateWithoutLockersInput
  connect: LockerClusterWhereUniqueInput
}

input LockerClusterCreateWithoutLockersInput {
  macAddress: String!
}

"""An edge in a connection."""
type LockerClusterEdge {
  """The item at the end of the edge."""
  node: LockerCluster!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LockerClusterOrderByInput {
  id_ASC
  id_DESC
  macAddress_ASC
  macAddress_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LockerClusterPreviousValues {
  id: ID!
  macAddress: String!
}

type LockerClusterSubscriptionPayload {
  mutation: MutationType!
  node: LockerCluster
  updatedFields: [String!]
  previousValues: LockerClusterPreviousValues
}

input LockerClusterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerClusterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerClusterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerClusterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LockerClusterWhereInput
}

input LockerClusterUpdateInput {
  macAddress: String
  lockers: LockerUpdateManyWithoutClusterInput
}

input LockerClusterUpdateOneWithoutLockersInput {
  create: LockerClusterCreateWithoutLockersInput
  connect: LockerClusterWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LockerClusterUpdateWithoutLockersDataInput
  upsert: LockerClusterUpsertWithoutLockersInput
}

input LockerClusterUpdateWithoutLockersDataInput {
  macAddress: String
}

input LockerClusterUpsertWithoutLockersInput {
  update: LockerClusterUpdateWithoutLockersDataInput!
  create: LockerClusterCreateWithoutLockersInput!
}

input LockerClusterWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerClusterWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerClusterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerClusterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  macAddress: String

  """All values that are not equal to given value."""
  macAddress_not: String

  """All values that are contained in given list."""
  macAddress_in: [String!]

  """All values that are not contained in given list."""
  macAddress_not_in: [String!]

  """All values less than the given value."""
  macAddress_lt: String

  """All values less than or equal the given value."""
  macAddress_lte: String

  """All values greater than the given value."""
  macAddress_gt: String

  """All values greater than or equal the given value."""
  macAddress_gte: String

  """All values containing the given string."""
  macAddress_contains: String

  """All values not containing the given string."""
  macAddress_not_contains: String

  """All values starting with the given string."""
  macAddress_starts_with: String

  """All values not starting with the given string."""
  macAddress_not_starts_with: String

  """All values ending with the given string."""
  macAddress_ends_with: String

  """All values not ending with the given string."""
  macAddress_not_ends_with: String
  lockers_every: LockerWhereInput
  lockers_some: LockerWhereInput
  lockers_none: LockerWhereInput
}

input LockerClusterWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type LockerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LockerEdge]!
  aggregate: AggregateLocker!
}

input LockerCreateInput {
  busy: Boolean
  locked: Boolean
  open: Boolean
  sensorPin: Int!
  alarmPin: Int!
  lockPin: Int!
  cluster: LockerClusterCreateOneWithoutLockersInput
}

input LockerCreateManyWithoutClusterInput {
  create: [LockerCreateWithoutClusterInput!]
  connect: [LockerWhereUniqueInput!]
}

input LockerCreateOneInput {
  create: LockerCreateInput
  connect: LockerWhereUniqueInput
}

input LockerCreateWithoutClusterInput {
  busy: Boolean
  locked: Boolean
  open: Boolean
  sensorPin: Int!
  alarmPin: Int!
  lockPin: Int!
}

"""An edge in a connection."""
type LockerEdge {
  """The item at the end of the edge."""
  node: Locker!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LockerOrderByInput {
  id_ASC
  id_DESC
  busy_ASC
  busy_DESC
  locked_ASC
  locked_DESC
  open_ASC
  open_DESC
  sensorPin_ASC
  sensorPin_DESC
  alarmPin_ASC
  alarmPin_DESC
  lockPin_ASC
  lockPin_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LockerPreviousValues {
  id: ID!
  busy: Boolean!
  locked: Boolean!
  open: Boolean!
  sensorPin: Int!
  alarmPin: Int!
  lockPin: Int!
}

type LockerSession implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  locker(where: LockerWhereInput): Locker!
  state: Int!
  startedAt: DateTime!
  finishedAt: DateTime
}

"""A connection to a list of items."""
type LockerSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LockerSessionEdge]!
  aggregate: AggregateLockerSession!
}

input LockerSessionCreateInput {
  state: Int
  startedAt: DateTime!
  finishedAt: DateTime
  user: UserCreateOneInput!
  locker: LockerCreateOneInput!
}

"""An edge in a connection."""
type LockerSessionEdge {
  """The item at the end of the edge."""
  node: LockerSession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LockerSessionOrderByInput {
  id_ASC
  id_DESC
  state_ASC
  state_DESC
  startedAt_ASC
  startedAt_DESC
  finishedAt_ASC
  finishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LockerSessionPreviousValues {
  id: ID!
  state: Int!
  startedAt: DateTime!
  finishedAt: DateTime
}

type LockerSessionSubscriptionPayload {
  mutation: MutationType!
  node: LockerSession
  updatedFields: [String!]
  previousValues: LockerSessionPreviousValues
}

input LockerSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LockerSessionWhereInput
}

input LockerSessionUpdateInput {
  state: Int
  startedAt: DateTime
  finishedAt: DateTime
  user: UserUpdateOneInput
  locker: LockerUpdateOneInput
}

input LockerSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  state: Int

  """All values that are not equal to given value."""
  state_not: Int

  """All values that are contained in given list."""
  state_in: [Int!]

  """All values that are not contained in given list."""
  state_not_in: [Int!]

  """All values less than the given value."""
  state_lt: Int

  """All values less than or equal the given value."""
  state_lte: Int

  """All values greater than the given value."""
  state_gt: Int

  """All values greater than or equal the given value."""
  state_gte: Int
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  finishedAt: DateTime

  """All values that are not equal to given value."""
  finishedAt_not: DateTime

  """All values that are contained in given list."""
  finishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  finishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  finishedAt_lt: DateTime

  """All values less than or equal the given value."""
  finishedAt_lte: DateTime

  """All values greater than the given value."""
  finishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  finishedAt_gte: DateTime
  user: UserWhereInput
  locker: LockerWhereInput
}

input LockerSessionWhereUniqueInput {
  id: ID
}

type LockerSubscriptionPayload {
  mutation: MutationType!
  node: Locker
  updatedFields: [String!]
  previousValues: LockerPreviousValues
}

input LockerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LockerWhereInput
}

input LockerUpdateDataInput {
  busy: Boolean
  locked: Boolean
  open: Boolean
  sensorPin: Int
  alarmPin: Int
  lockPin: Int
  cluster: LockerClusterUpdateOneWithoutLockersInput
}

input LockerUpdateInput {
  busy: Boolean
  locked: Boolean
  open: Boolean
  sensorPin: Int
  alarmPin: Int
  lockPin: Int
  cluster: LockerClusterUpdateOneWithoutLockersInput
}

input LockerUpdateManyWithoutClusterInput {
  create: [LockerCreateWithoutClusterInput!]
  connect: [LockerWhereUniqueInput!]
  disconnect: [LockerWhereUniqueInput!]
  delete: [LockerWhereUniqueInput!]
  update: [LockerUpdateWithWhereUniqueWithoutClusterInput!]
  upsert: [LockerUpsertWithWhereUniqueWithoutClusterInput!]
}

input LockerUpdateOneInput {
  create: LockerCreateInput
  connect: LockerWhereUniqueInput
  delete: Boolean
  update: LockerUpdateDataInput
  upsert: LockerUpsertNestedInput
}

input LockerUpdateWithoutClusterDataInput {
  busy: Boolean
  locked: Boolean
  open: Boolean
  sensorPin: Int
  alarmPin: Int
  lockPin: Int
}

input LockerUpdateWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput!
  data: LockerUpdateWithoutClusterDataInput!
}

input LockerUpsertNestedInput {
  update: LockerUpdateDataInput!
  create: LockerCreateInput!
}

input LockerUpsertWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput!
  update: LockerUpdateWithoutClusterDataInput!
  create: LockerCreateWithoutClusterInput!
}

input LockerWhereInput {
  """Logical AND on all given filters."""
  AND: [LockerWhereInput!]

  """Logical OR on all given filters."""
  OR: [LockerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LockerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  busy: Boolean

  """All values that are not equal to given value."""
  busy_not: Boolean
  locked: Boolean

  """All values that are not equal to given value."""
  locked_not: Boolean
  open: Boolean

  """All values that are not equal to given value."""
  open_not: Boolean
  sensorPin: Int

  """All values that are not equal to given value."""
  sensorPin_not: Int

  """All values that are contained in given list."""
  sensorPin_in: [Int!]

  """All values that are not contained in given list."""
  sensorPin_not_in: [Int!]

  """All values less than the given value."""
  sensorPin_lt: Int

  """All values less than or equal the given value."""
  sensorPin_lte: Int

  """All values greater than the given value."""
  sensorPin_gt: Int

  """All values greater than or equal the given value."""
  sensorPin_gte: Int
  alarmPin: Int

  """All values that are not equal to given value."""
  alarmPin_not: Int

  """All values that are contained in given list."""
  alarmPin_in: [Int!]

  """All values that are not contained in given list."""
  alarmPin_not_in: [Int!]

  """All values less than the given value."""
  alarmPin_lt: Int

  """All values less than or equal the given value."""
  alarmPin_lte: Int

  """All values greater than the given value."""
  alarmPin_gt: Int

  """All values greater than or equal the given value."""
  alarmPin_gte: Int
  lockPin: Int

  """All values that are not equal to given value."""
  lockPin_not: Int

  """All values that are contained in given list."""
  lockPin_in: [Int!]

  """All values that are not contained in given list."""
  lockPin_not_in: [Int!]

  """All values less than the given value."""
  lockPin_lt: Int

  """All values less than or equal the given value."""
  lockPin_lte: Int

  """All values greater than the given value."""
  lockPin_gt: Int

  """All values greater than or equal the given value."""
  lockPin_gte: Int
  cluster: LockerClusterWhereInput
}

input LockerWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLockerCluster(data: LockerClusterCreateInput!): LockerCluster!
  createLockerSession(data: LockerSessionCreateInput!): LockerSession!
  createLocker(data: LockerCreateInput!): Locker!
  createUser(data: UserCreateInput!): User!
  updateLockerCluster(data: LockerClusterUpdateInput!, where: LockerClusterWhereUniqueInput!): LockerCluster
  updateLockerSession(data: LockerSessionUpdateInput!, where: LockerSessionWhereUniqueInput!): LockerSession
  updateLocker(data: LockerUpdateInput!, where: LockerWhereUniqueInput!): Locker
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteLockerCluster(where: LockerClusterWhereUniqueInput!): LockerCluster
  deleteLockerSession(where: LockerSessionWhereUniqueInput!): LockerSession
  deleteLocker(where: LockerWhereUniqueInput!): Locker
  deleteUser(where: UserWhereUniqueInput!): User
  upsertLockerCluster(where: LockerClusterWhereUniqueInput!, create: LockerClusterCreateInput!, update: LockerClusterUpdateInput!): LockerCluster!
  upsertLockerSession(where: LockerSessionWhereUniqueInput!, create: LockerSessionCreateInput!, update: LockerSessionUpdateInput!): LockerSession!
  upsertLocker(where: LockerWhereUniqueInput!, create: LockerCreateInput!, update: LockerUpdateInput!): Locker!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyLockerClusters(data: LockerClusterUpdateInput!, where: LockerClusterWhereInput): BatchPayload!
  updateManyLockerSessions(data: LockerSessionUpdateInput!, where: LockerSessionWhereInput): BatchPayload!
  updateManyLockers(data: LockerUpdateInput!, where: LockerWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyLockerClusters(where: LockerClusterWhereInput): BatchPayload!
  deleteManyLockerSessions(where: LockerSessionWhereInput): BatchPayload!
  deleteManyLockers(where: LockerWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  lockerClusters(where: LockerClusterWhereInput, orderBy: LockerClusterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LockerCluster]!
  lockerSessions(where: LockerSessionWhereInput, orderBy: LockerSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LockerSession]!
  lockers(where: LockerWhereInput, orderBy: LockerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Locker]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  lockerCluster(where: LockerClusterWhereUniqueInput!): LockerCluster
  lockerSession(where: LockerSessionWhereUniqueInput!): LockerSession
  locker(where: LockerWhereUniqueInput!): Locker
  user(where: UserWhereUniqueInput!): User
  lockerClustersConnection(where: LockerClusterWhereInput, orderBy: LockerClusterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LockerClusterConnection!
  lockerSessionsConnection(where: LockerSessionWhereInput, orderBy: LockerSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LockerSessionConnection!
  lockersConnection(where: LockerWhereInput, orderBy: LockerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LockerConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  lockerCluster(where: LockerClusterSubscriptionWhereInput): LockerClusterSubscriptionPayload
  lockerSession(where: LockerSessionSubscriptionWhereInput): LockerSessionSubscriptionPayload
  locker(where: LockerSubscriptionWhereInput): LockerSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  credit: Int!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  credit: Int
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  credit_ASC
  credit_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  credit: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  credit: Int
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  credit: Int
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  credit: Int

  """All values that are not equal to given value."""
  credit_not: Int

  """All values that are contained in given list."""
  credit_in: [Int!]

  """All values that are not contained in given list."""
  credit_not_in: [Int!]

  """All values less than the given value."""
  credit_lt: Int

  """All values less than or equal the given value."""
  credit_lte: Int

  """All values greater than the given value."""
  credit_gt: Int

  """All values greater than or equal the given value."""
  credit_gte: Int
}

input UserWhereUniqueInput {
  id: ID
}
