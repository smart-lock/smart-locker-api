// Code generated by Prisma CLI (https://github.com/prisma/prisma) and prisma-client-lib@0.2.58. DO NOT EDIT.

import { GraphQLSchema } from 'graphql';
import { IResolvers } from 'graphql-tools/dist/Interfaces';
import { BaseClientOptions, makePrismaClientClass } from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  lockerCluster: (where?: LockerClusterWhereInput) => Promise<boolean>;
  locker: (where?: LockerWhereInput) => Promise<boolean>;
  lockerSession: (where?: LockerSessionWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => Promise<UserNode[]>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => UserConnection;
  lockerCluster: (where: LockerClusterWhereUniqueInput) => LockerCluster;
  lockerClusters: (
    args?: {
      where?: LockerClusterWhereInput;
      orderBy?: LockerClusterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => Promise<LockerClusterNode[]>;
  lockerClustersConnection: (
    args?: {
      where?: LockerClusterWhereInput;
      orderBy?: LockerClusterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => LockerClusterConnection;
  locker: (where: LockerWhereUniqueInput) => Locker;
  lockers: (
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => Promise<LockerNode[]>;
  lockersConnection: (
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => LockerConnection;
  lockerSession: (where: LockerSessionWhereUniqueInput) => LockerSession;
  lockerSessions: (
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => Promise<LockerSessionNode[]>;
  lockerSessionsConnection: (
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => LockerSessionConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput },
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput },
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    },
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createLockerCluster: (data: LockerClusterCreateInput) => LockerCluster;
  updateLockerCluster: (
    args: {
      data: LockerClusterUpdateInput;
      where: LockerClusterWhereUniqueInput;
    },
  ) => LockerCluster;
  updateManyLockerClusters: (
    args: { data: LockerClusterUpdateInput; where?: LockerClusterWhereInput },
  ) => BatchPayload;
  upsertLockerCluster: (
    args: {
      where: LockerClusterWhereUniqueInput;
      create: LockerClusterCreateInput;
      update: LockerClusterUpdateInput;
    },
  ) => LockerCluster;
  deleteLockerCluster: (where: LockerClusterWhereUniqueInput) => LockerCluster;
  deleteManyLockerClusters: (where?: LockerClusterWhereInput) => BatchPayload;
  createLocker: (data: LockerCreateInput) => Locker;
  updateLocker: (
    args: { data: LockerUpdateInput; where: LockerWhereUniqueInput },
  ) => Locker;
  updateManyLockers: (
    args: { data: LockerUpdateInput; where?: LockerWhereInput },
  ) => BatchPayload;
  upsertLocker: (
    args: {
      where: LockerWhereUniqueInput;
      create: LockerCreateInput;
      update: LockerUpdateInput;
    },
  ) => Locker;
  deleteLocker: (where: LockerWhereUniqueInput) => Locker;
  deleteManyLockers: (where?: LockerWhereInput) => BatchPayload;
  createLockerSession: (data: LockerSessionCreateInput) => LockerSession;
  updateLockerSession: (
    args: {
      data: LockerSessionUpdateInput;
      where: LockerSessionWhereUniqueInput;
    },
  ) => LockerSession;
  updateManyLockerSessions: (
    args: { data: LockerSessionUpdateInput; where?: LockerSessionWhereInput },
  ) => BatchPayload;
  upsertLockerSession: (
    args: {
      where: LockerSessionWhereUniqueInput;
      create: LockerSessionCreateInput;
      update: LockerSessionUpdateInput;
    },
  ) => LockerSession;
  deleteLockerSession: (where: LockerSessionWhereUniqueInput) => LockerSession;
  deleteManyLockerSessions: (where?: LockerSessionWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription;
  lockerCluster: (
    where?: LockerClusterSubscriptionWhereInput,
  ) => LockerClusterSubscriptionPayloadSubscription;
  locker: (
    where?: LockerSubscriptionWhereInput,
  ) => LockerSubscriptionPayloadSubscription;
  lockerSession: (
    where?: LockerSessionSubscriptionWhereInput,
  ) => LockerSessionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LockerSessionOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'startedAt_ASC'
  | 'startedAt_DESC'
  | 'finishedAt_ASC'
  | 'finishedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type LockerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'idInCluster_ASC'
  | 'idInCluster_DESC'
  | 'busy_ASC'
  | 'busy_DESC'
  | 'locked_ASC'
  | 'locked_DESC'
  | 'open_ASC'
  | 'open_DESC'
  | 'closed_ASC'
  | 'closed_DESC'
  | 'alarm_ASC'
  | 'alarm_DESC'
  | 'sensorPin_ASC'
  | 'sensorPin_DESC'
  | 'alarmPin_ASC'
  | 'alarmPin_DESC'
  | 'lockPin_ASC'
  | 'lockPin_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'credit_ASC'
  | 'credit_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type LockerClusterOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'macAddress_ASC'
  | 'macAddress_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface LockerUpdateOneWithoutSessionsInput {
  create?: LockerCreateWithoutSessionsInput;
  update?: LockerUpdateWithoutSessionsDataInput;
  upsert?: LockerUpsertWithoutSessionsInput;
  delete?: Boolean;
  connect?: LockerWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
  email?: String;
}>;

export interface LockerClusterUpsertWithoutLockersInput {
  update: LockerClusterUpdateWithoutLockersDataInput;
  create: LockerClusterCreateWithoutLockersInput;
}

export interface LockerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  idInCluster?: String;
  idInCluster_not?: String;
  idInCluster_in?: String[] | String;
  idInCluster_not_in?: String[] | String;
  idInCluster_lt?: String;
  idInCluster_lte?: String;
  idInCluster_gt?: String;
  idInCluster_gte?: String;
  idInCluster_contains?: String;
  idInCluster_not_contains?: String;
  idInCluster_starts_with?: String;
  idInCluster_not_starts_with?: String;
  idInCluster_ends_with?: String;
  idInCluster_not_ends_with?: String;
  cluster?: LockerClusterWhereInput;
  busy?: Boolean;
  busy_not?: Boolean;
  locked?: Boolean;
  locked_not?: Boolean;
  open?: Boolean;
  open_not?: Boolean;
  closed?: Boolean;
  closed_not?: Boolean;
  alarm?: Boolean;
  alarm_not?: Boolean;
  sensorPin?: Int;
  sensorPin_not?: Int;
  sensorPin_in?: Int[] | Int;
  sensorPin_not_in?: Int[] | Int;
  sensorPin_lt?: Int;
  sensorPin_lte?: Int;
  sensorPin_gt?: Int;
  sensorPin_gte?: Int;
  alarmPin?: Int;
  alarmPin_not?: Int;
  alarmPin_in?: Int[] | Int;
  alarmPin_not_in?: Int[] | Int;
  alarmPin_lt?: Int;
  alarmPin_lte?: Int;
  alarmPin_gt?: Int;
  alarmPin_gte?: Int;
  lockPin?: Int;
  lockPin_not?: Int;
  lockPin_in?: Int[] | Int;
  lockPin_not_in?: Int[] | Int;
  lockPin_lt?: Int;
  lockPin_lte?: Int;
  lockPin_gt?: Int;
  lockPin_gte?: Int;
  currentOwner?: UserWhereInput;
  sessions_every?: LockerSessionWhereInput;
  sessions_some?: LockerSessionWhereInput;
  sessions_none?: LockerSessionWhereInput;
  AND?: LockerWhereInput[] | LockerWhereInput;
  OR?: LockerWhereInput[] | LockerWhereInput;
  NOT?: LockerWhereInput[] | LockerWhereInput;
}

export interface LockerSessionCreateWithoutUserInput {
  locker: LockerCreateOneWithoutSessionsInput;
  state?: Int;
  startedAt: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export interface LockerSessionCreateWithoutLockerInput {
  user: UserCreateOneWithoutSessionsInput;
  state?: Int;
  startedAt: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export interface LockerCreateOneWithoutSessionsInput {
  create?: LockerCreateWithoutSessionsInput;
  connect?: LockerWhereUniqueInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface LockerCreateWithoutSessionsInput {
  idInCluster: String;
  cluster?: LockerClusterCreateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin: Int;
  alarmPin: Int;
  lockPin: Int;
  currentOwner?: UserCreateOneInput;
}

export interface LockerSessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LockerSessionWhereInput;
  AND?:
    | LockerSessionSubscriptionWhereInput[]
    | LockerSessionSubscriptionWhereInput;
  OR?:
    | LockerSessionSubscriptionWhereInput[]
    | LockerSessionSubscriptionWhereInput;
  NOT?:
    | LockerSessionSubscriptionWhereInput[]
    | LockerSessionSubscriptionWhereInput;
}

export interface LockerClusterCreateOneWithoutLockersInput {
  create?: LockerClusterCreateWithoutLockersInput;
  connect?: LockerClusterWhereUniqueInput;
}

export interface LockerClusterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LockerClusterWhereInput;
  AND?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
  OR?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
  NOT?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
}

export interface LockerClusterCreateWithoutLockersInput {
  macAddress?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface LockerSessionCreateInput {
  user: UserCreateOneWithoutSessionsInput;
  locker: LockerCreateOneWithoutSessionsInput;
  state?: Int;
  startedAt: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  credit?: Int;
  sessions?: LockerSessionUpdateManyWithoutUserInput;
}

export interface LockerCreateInput {
  idInCluster: String;
  cluster?: LockerClusterCreateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin: Int;
  alarmPin: Int;
  lockPin: Int;
  currentOwner?: UserCreateOneInput;
  sessions?: LockerSessionCreateManyWithoutLockerInput;
}

export interface LockerSessionUpdateManyWithoutUserInput {
  create?:
    | LockerSessionCreateWithoutUserInput[]
    | LockerSessionCreateWithoutUserInput;
  delete?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  connect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  disconnect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  update?:
    | LockerSessionUpdateWithWhereUniqueWithoutUserInput[]
    | LockerSessionUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LockerSessionUpsertWithWhereUniqueWithoutUserInput[]
    | LockerSessionUpsertWithWhereUniqueWithoutUserInput;
}

export interface LockerUpsertWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput;
  update: LockerUpdateWithoutClusterDataInput;
  create: LockerCreateWithoutClusterInput;
}

export interface LockerSessionUpdateWithWhereUniqueWithoutUserInput {
  where: LockerSessionWhereUniqueInput;
  data: LockerSessionUpdateWithoutUserDataInput;
}

export interface UserUpsertWithoutSessionsInput {
  update: UserUpdateWithoutSessionsDataInput;
  create: UserCreateWithoutSessionsInput;
}

export interface LockerSessionUpdateWithoutUserDataInput {
  locker?: LockerUpdateOneWithoutSessionsInput;
  state?: Int;
  startedAt?: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export type LockerWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface LockerUpdateManyWithoutClusterInput {
  create?: LockerCreateWithoutClusterInput[] | LockerCreateWithoutClusterInput;
  delete?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  connect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  disconnect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  update?:
    | LockerUpdateWithWhereUniqueWithoutClusterInput[]
    | LockerUpdateWithWhereUniqueWithoutClusterInput;
  upsert?:
    | LockerUpsertWithWhereUniqueWithoutClusterInput[]
    | LockerUpsertWithWhereUniqueWithoutClusterInput;
}

export interface LockerSessionUpdateWithoutLockerDataInput {
  user?: UserUpdateOneWithoutSessionsInput;
  state?: Int;
  startedAt?: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export interface LockerUpdateWithoutSessionsDataInput {
  idInCluster?: String;
  cluster?: LockerClusterUpdateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin?: Int;
  alarmPin?: Int;
  lockPin?: Int;
  currentOwner?: UserUpdateOneInput;
}

export type LockerSessionWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface LockerClusterUpdateOneWithoutLockersInput {
  create?: LockerClusterCreateWithoutLockersInput;
  update?: LockerClusterUpdateWithoutLockersDataInput;
  upsert?: LockerClusterUpsertWithoutLockersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LockerClusterWhereUniqueInput;
}

export interface LockerUpdateWithoutClusterDataInput {
  idInCluster?: String;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin?: Int;
  alarmPin?: Int;
  lockPin?: Int;
  currentOwner?: UserUpdateOneInput;
  sessions?: LockerSessionUpdateManyWithoutLockerInput;
}

export interface LockerClusterUpdateWithoutLockersDataInput {
  macAddress?: String;
}

export interface LockerSessionCreateManyWithoutUserInput {
  create?:
    | LockerSessionCreateWithoutUserInput[]
    | LockerSessionCreateWithoutUserInput;
  connect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
}

export interface LockerClusterWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  lockers_every?: LockerWhereInput;
  lockers_some?: LockerWhereInput;
  lockers_none?: LockerWhereInput;
  macAddress?: String;
  macAddress_not?: String;
  macAddress_in?: String[] | String;
  macAddress_not_in?: String[] | String;
  macAddress_lt?: String;
  macAddress_lte?: String;
  macAddress_gt?: String;
  macAddress_gte?: String;
  macAddress_contains?: String;
  macAddress_not_contains?: String;
  macAddress_starts_with?: String;
  macAddress_not_starts_with?: String;
  macAddress_ends_with?: String;
  macAddress_not_ends_with?: String;
  AND?: LockerClusterWhereInput[] | LockerClusterWhereInput;
  OR?: LockerClusterWhereInput[] | LockerClusterWhereInput;
  NOT?: LockerClusterWhereInput[] | LockerClusterWhereInput;
}

export interface LockerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LockerWhereInput;
  AND?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
  OR?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
  NOT?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
}

export interface LockerClusterUpdateInput {
  lockers?: LockerUpdateManyWithoutClusterInput;
  macAddress?: String;
}

export interface LockerSessionUpdateInput {
  user?: UserUpdateOneWithoutSessionsInput;
  locker?: LockerUpdateOneWithoutSessionsInput;
  state?: Int;
  startedAt?: DateTimeInput;
  finishedAt?: DateTimeInput;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  password?: String;
  credit?: Int;
  sessions?: LockerSessionUpdateManyWithoutUserInput;
}

export type LockerClusterWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
  macAddress?: String;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateWithoutSessionsDataInput {
  name?: String;
  email?: String;
  password?: String;
  credit?: Int;
}

export interface LockerUpsertWithoutSessionsInput {
  update: LockerUpdateWithoutSessionsDataInput;
  create: LockerCreateWithoutSessionsInput;
}

export interface LockerSessionUpdateWithWhereUniqueWithoutLockerInput {
  where: LockerSessionWhereUniqueInput;
  data: LockerSessionUpdateWithoutLockerDataInput;
}

export interface LockerSessionUpsertWithWhereUniqueWithoutUserInput {
  where: LockerSessionWhereUniqueInput;
  update: LockerSessionUpdateWithoutUserDataInput;
  create: LockerSessionCreateWithoutUserInput;
}

export interface LockerUpdateWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput;
  data: LockerUpdateWithoutClusterDataInput;
}

export interface UserCreateWithoutSessionsInput {
  name: String;
  email: String;
  password: String;
  credit?: Int;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  credit?: Int;
  credit_not?: Int;
  credit_in?: Int[] | Int;
  credit_not_in?: Int[] | Int;
  credit_lt?: Int;
  credit_lte?: Int;
  credit_gt?: Int;
  credit_gte?: Int;
  sessions_every?: LockerSessionWhereInput;
  sessions_some?: LockerSessionWhereInput;
  sessions_none?: LockerSessionWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateOneWithoutSessionsInput {
  create?: UserCreateWithoutSessionsInput;
  connect?: UserWhereUniqueInput;
}

export interface LockerUpdateInput {
  idInCluster?: String;
  cluster?: LockerClusterUpdateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin?: Int;
  alarmPin?: Int;
  lockPin?: Int;
  currentOwner?: UserUpdateOneInput;
  sessions?: LockerSessionUpdateManyWithoutLockerInput;
}

export interface LockerSessionCreateManyWithoutLockerInput {
  create?:
    | LockerSessionCreateWithoutLockerInput[]
    | LockerSessionCreateWithoutLockerInput;
  connect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
}

export interface LockerCreateWithoutClusterInput {
  idInCluster: String;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin: Int;
  alarmPin: Int;
  lockPin: Int;
  currentOwner?: UserCreateOneInput;
  sessions?: LockerSessionCreateManyWithoutLockerInput;
}

export interface LockerCreateManyWithoutClusterInput {
  create?: LockerCreateWithoutClusterInput[] | LockerCreateWithoutClusterInput;
  connect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
}

export interface LockerClusterCreateInput {
  lockers?: LockerCreateManyWithoutClusterInput;
  macAddress?: String;
}

export interface LockerSessionUpsertWithWhereUniqueWithoutLockerInput {
  where: LockerSessionWhereUniqueInput;
  update: LockerSessionUpdateWithoutLockerDataInput;
  create: LockerSessionCreateWithoutLockerInput;
}

export interface LockerSessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  locker?: LockerWhereInput;
  state?: Int;
  state_not?: Int;
  state_in?: Int[] | Int;
  state_not_in?: Int[] | Int;
  state_lt?: Int;
  state_lte?: Int;
  state_gt?: Int;
  state_gte?: Int;
  startedAt?: DateTimeInput;
  startedAt_not?: DateTimeInput;
  startedAt_in?: DateTimeInput[] | DateTimeInput;
  startedAt_not_in?: DateTimeInput[] | DateTimeInput;
  startedAt_lt?: DateTimeInput;
  startedAt_lte?: DateTimeInput;
  startedAt_gt?: DateTimeInput;
  startedAt_gte?: DateTimeInput;
  finishedAt?: DateTimeInput;
  finishedAt_not?: DateTimeInput;
  finishedAt_in?: DateTimeInput[] | DateTimeInput;
  finishedAt_not_in?: DateTimeInput[] | DateTimeInput;
  finishedAt_lt?: DateTimeInput;
  finishedAt_lte?: DateTimeInput;
  finishedAt_gt?: DateTimeInput;
  finishedAt_gte?: DateTimeInput;
  AND?: LockerSessionWhereInput[] | LockerSessionWhereInput;
  OR?: LockerSessionWhereInput[] | LockerSessionWhereInput;
  NOT?: LockerSessionWhereInput[] | LockerSessionWhereInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  credit?: Int;
  sessions?: LockerSessionCreateManyWithoutUserInput;
}

export interface LockerSessionUpdateManyWithoutLockerInput {
  create?:
    | LockerSessionCreateWithoutLockerInput[]
    | LockerSessionCreateWithoutLockerInput;
  delete?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  connect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  disconnect?: LockerSessionWhereUniqueInput[] | LockerSessionWhereUniqueInput;
  update?:
    | LockerSessionUpdateWithWhereUniqueWithoutLockerInput[]
    | LockerSessionUpdateWithWhereUniqueWithoutLockerInput;
  upsert?:
    | LockerSessionUpsertWithWhereUniqueWithoutLockerInput[]
    | LockerSessionUpsertWithWhereUniqueWithoutLockerInput;
}

export interface UserUpdateOneWithoutSessionsInput {
  create?: UserCreateWithoutSessionsInput;
  update?: UserUpdateWithoutSessionsDataInput;
  upsert?: UserUpsertWithoutSessionsInput;
  delete?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface LockerSessionPreviousValuesNode {
  id: ID_Output;
  state: Int;
  startedAt: DateTimeOutput;
  finishedAt?: DateTimeOutput;
}

export interface LockerSessionPreviousValues
  extends Promise<LockerSessionPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  state: () => Promise<Int>;
  startedAt: () => Promise<DateTimeOutput>;
  finishedAt: () => Promise<DateTimeOutput>;
}

export interface LockerSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<LockerSessionPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  state: () => Promise<AsyncIterator<Int>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  credit: Int;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  credit: () => Promise<Int>;
  sessions: <T = Promise<LockerSessionNode[]>>(
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  credit: () => Promise<AsyncIterator<Int>>;
  sessions: <T = Promise<AsyncIterator<LockerSessionSubscription[]>>>(
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
}

export interface LockerNode {
  id: ID_Output;
  idInCluster: String;
  busy: Boolean;
  locked: Boolean;
  open: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin: Int;
  alarmPin: Int;
  lockPin: Int;
}

export interface Locker extends Promise<LockerNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  idInCluster: () => Promise<String>;
  cluster: <T = LockerCluster>() => T;
  busy: () => Promise<Boolean>;
  locked: () => Promise<Boolean>;
  open: () => Promise<Boolean>;
  closed: () => Promise<Boolean>;
  alarm: () => Promise<Boolean>;
  sensorPin: () => Promise<Int>;
  alarmPin: () => Promise<Int>;
  lockPin: () => Promise<Int>;
  currentOwner: <T = User>() => T;
  sessions: <T = Promise<LockerSessionNode[]>>(
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
}

export interface LockerSubscription
  extends Promise<AsyncIterator<LockerNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idInCluster: () => Promise<AsyncIterator<String>>;
  cluster: <T = LockerClusterSubscription>() => T;
  busy: () => Promise<AsyncIterator<Boolean>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  alarm: () => Promise<AsyncIterator<Boolean>>;
  sensorPin: () => Promise<AsyncIterator<Int>>;
  alarmPin: () => Promise<AsyncIterator<Int>>;
  lockPin: () => Promise<AsyncIterator<Int>>;
  currentOwner: <T = UserSubscription>() => T;
  sessions: <T = Promise<AsyncIterator<LockerSessionSubscription[]>>>(
    args?: {
      where?: LockerSessionWhereInput;
      orderBy?: LockerSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LockerSessionNode {
  id: ID_Output;
  state: Int;
  startedAt: DateTimeOutput;
  finishedAt?: DateTimeOutput;
}

export interface LockerSession
  extends Promise<LockerSessionNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = User>() => T;
  locker: <T = Locker>() => T;
  state: () => Promise<Int>;
  startedAt: () => Promise<DateTimeOutput>;
  finishedAt: () => Promise<DateTimeOutput>;
}

export interface LockerSessionSubscription
  extends Promise<AsyncIterator<LockerSessionNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  locker: <T = LockerSubscription>() => T;
  state: () => Promise<AsyncIterator<Int>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LockerSessionEdgeNode {
  cursor: String;
}

export interface LockerSessionEdge
  extends Promise<LockerSessionEdgeNode>,
    Fragmentable {
  node: <T = LockerSession>() => T;
  cursor: () => Promise<String>;
}

export interface LockerSessionEdgeSubscription
  extends Promise<AsyncIterator<LockerSessionEdgeNode>>,
    Fragmentable {
  node: <T = LockerSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<UserEdgeNode[]>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription[]>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateLockerNode {
  count: Int;
}

export interface AggregateLocker
  extends Promise<AggregateLockerNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLockerSubscription
  extends Promise<AsyncIterator<AggregateLockerNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LockerPreviousValuesNode {
  id: ID_Output;
  idInCluster: String;
  busy: Boolean;
  locked: Boolean;
  open: Boolean;
  closed?: Boolean;
  alarm?: Boolean;
  sensorPin: Int;
  alarmPin: Int;
  lockPin: Int;
}

export interface LockerPreviousValues
  extends Promise<LockerPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idInCluster: () => Promise<String>;
  busy: () => Promise<Boolean>;
  locked: () => Promise<Boolean>;
  open: () => Promise<Boolean>;
  closed: () => Promise<Boolean>;
  alarm: () => Promise<Boolean>;
  sensorPin: () => Promise<Int>;
  alarmPin: () => Promise<Int>;
  lockPin: () => Promise<Int>;
}

export interface LockerPreviousValuesSubscription
  extends Promise<AsyncIterator<LockerPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idInCluster: () => Promise<AsyncIterator<String>>;
  busy: () => Promise<AsyncIterator<Boolean>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  alarm: () => Promise<AsyncIterator<Boolean>>;
  sensorPin: () => Promise<AsyncIterator<Int>>;
  alarmPin: () => Promise<AsyncIterator<Int>>;
  lockPin: () => Promise<AsyncIterator<Int>>;
}

export interface LockerConnectionNode {}

export interface LockerConnection
  extends Promise<LockerConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<LockerEdgeNode[]>>() => T;
  aggregate: <T = AggregateLocker>() => T;
}

export interface LockerConnectionSubscription
  extends Promise<AsyncIterator<LockerConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LockerEdgeSubscription[]>>>() => T;
  aggregate: <T = AggregateLockerSubscription>() => T;
}

export interface LockerSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LockerSubscriptionPayload
  extends Promise<LockerSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Locker>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LockerPreviousValues>() => T;
}

export interface LockerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LockerSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LockerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LockerPreviousValuesSubscription>() => T;
}

export interface LockerClusterEdgeNode {
  cursor: String;
}

export interface LockerClusterEdge
  extends Promise<LockerClusterEdgeNode>,
    Fragmentable {
  node: <T = LockerCluster>() => T;
  cursor: () => Promise<String>;
}

export interface LockerClusterEdgeSubscription
  extends Promise<AsyncIterator<LockerClusterEdgeNode>>,
    Fragmentable {
  node: <T = LockerClusterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LockerSessionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LockerSessionSubscriptionPayload
  extends Promise<LockerSessionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LockerSession>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LockerSessionPreviousValues>() => T;
}

export interface LockerSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LockerSessionSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LockerSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LockerSessionPreviousValuesSubscription>() => T;
}

export interface LockerSessionConnectionNode {}

export interface LockerSessionConnection
  extends Promise<LockerSessionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<LockerSessionEdgeNode[]>>() => T;
  aggregate: <T = AggregateLockerSession>() => T;
}

export interface LockerSessionConnectionSubscription
  extends Promise<AsyncIterator<LockerSessionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<LockerSessionEdgeSubscription[]>>
  >() => T;
  aggregate: <T = AggregateLockerSessionSubscription>() => T;
}

export interface LockerClusterPreviousValuesNode {
  id: ID_Output;
  macAddress: String;
}

export interface LockerClusterPreviousValues
  extends Promise<LockerClusterPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  macAddress: () => Promise<String>;
}

export interface LockerClusterPreviousValuesSubscription
  extends Promise<AsyncIterator<LockerClusterPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  macAddress: () => Promise<AsyncIterator<String>>;
}

export interface LockerClusterSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LockerClusterSubscriptionPayload
  extends Promise<LockerClusterSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LockerCluster>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LockerClusterPreviousValues>() => T;
}

export interface LockerClusterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LockerClusterSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LockerClusterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LockerClusterPreviousValuesSubscription>() => T;
}

export interface LockerClusterNode {
  id: ID_Output;
  macAddress: String;
}

export interface LockerCluster
  extends Promise<LockerClusterNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lockers: <T = Promise<LockerNode[]>>(
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  macAddress: () => Promise<String>;
}

export interface LockerClusterSubscription
  extends Promise<AsyncIterator<LockerClusterNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lockers: <T = Promise<AsyncIterator<LockerSubscription[]>>>(
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  macAddress: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  credit: Int;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  credit: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  credit: () => Promise<AsyncIterator<Int>>;
}

export interface LockerEdgeNode {
  cursor: String;
}

export interface LockerEdge extends Promise<LockerEdgeNode>, Fragmentable {
  node: <T = Locker>() => T;
  cursor: () => Promise<String>;
}

export interface LockerEdgeSubscription
  extends Promise<AsyncIterator<LockerEdgeNode>>,
    Fragmentable {
  node: <T = LockerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLockerSessionNode {
  count: Int;
}

export interface AggregateLockerSession
  extends Promise<AggregateLockerSessionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLockerSessionSubscription
  extends Promise<AsyncIterator<AggregateLockerSessionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LockerClusterConnectionNode {}

export interface LockerClusterConnection
  extends Promise<LockerClusterConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<LockerClusterEdgeNode[]>>() => T;
  aggregate: <T = AggregateLockerCluster>() => T;
}

export interface LockerClusterConnectionSubscription
  extends Promise<AsyncIterator<LockerClusterConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<LockerClusterEdgeSubscription[]>>
  >() => T;
  aggregate: <T = AggregateLockerClusterSubscription>() => T;
}

export interface AggregateLockerClusterNode {
  count: Int;
}

export interface AggregateLockerCluster
  extends Promise<AggregateLockerClusterNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLockerClusterSubscription
  extends Promise<AsyncIterator<AggregateLockerClusterNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: process.env.PRISMA_URI,
});
export const prisma = new Prisma();
