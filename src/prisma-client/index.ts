// Code generated by Prisma CLI (https://github.com/prisma/prisma) and prisma-client-lib@0.2.58. DO NOT EDIT.

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  lockerCluster: (where?: LockerClusterWhereInput) => Promise<boolean>;
  locker: (where?: LockerWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  lockerCluster: (where: LockerClusterWhereUniqueInput) => LockerCluster;
  lockerClusters: (
    args?: {
      where?: LockerClusterWhereInput;
      orderBy?: LockerClusterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LockerClusterNode>>;
  lockerClustersConnection: (
    args?: {
      where?: LockerClusterWhereInput;
      orderBy?: LockerClusterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LockerClusterConnection;
  locker: (where: LockerWhereUniqueInput) => Locker;
  lockers: (
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LockerNode>>;
  lockersConnection: (
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LockerConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createLockerCluster: (data: LockerClusterCreateInput) => LockerCluster;
  updateLockerCluster: (
    args: {
      data: LockerClusterUpdateInput;
      where: LockerClusterWhereUniqueInput;
    }
  ) => LockerCluster;
  updateManyLockerClusters: (
    args: { data: LockerClusterUpdateInput; where?: LockerClusterWhereInput }
  ) => BatchPayload;
  upsertLockerCluster: (
    args: {
      where: LockerClusterWhereUniqueInput;
      create: LockerClusterCreateInput;
      update: LockerClusterUpdateInput;
    }
  ) => LockerCluster;
  deleteLockerCluster: (where: LockerClusterWhereUniqueInput) => LockerCluster;
  deleteManyLockerClusters: (where?: LockerClusterWhereInput) => BatchPayload;
  createLocker: (data: LockerCreateInput) => Locker;
  updateLocker: (
    args: { data: LockerUpdateInput; where: LockerWhereUniqueInput }
  ) => Locker;
  updateManyLockers: (
    args: { data: LockerUpdateInput; where?: LockerWhereInput }
  ) => BatchPayload;
  upsertLocker: (
    args: {
      where: LockerWhereUniqueInput;
      create: LockerCreateInput;
      update: LockerUpdateInput;
    }
  ) => Locker;
  deleteLocker: (where: LockerWhereUniqueInput) => Locker;
  deleteManyLockers: (where?: LockerWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  lockerCluster: (
    where?: LockerClusterSubscriptionWhereInput
  ) => LockerClusterSubscriptionPayloadSubscription;
  locker: (
    where?: LockerSubscriptionWhereInput
  ) => LockerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LockerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "busy_ASC"
  | "busy_DESC"
  | "locked_ASC"
  | "locked_DESC"
  | "open_ASC"
  | "open_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LockerClusterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface LockerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cluster?: LockerClusterWhereInput;
  busy?: Boolean;
  busy_not?: Boolean;
  locked?: Boolean;
  locked_not?: Boolean;
  open?: Boolean;
  open_not?: Boolean;
  AND?: LockerWhereInput[] | LockerWhereInput;
  OR?: LockerWhereInput[] | LockerWhereInput;
  NOT?: LockerWhereInput[] | LockerWhereInput;
}

export interface UserCreateInput {
  name: String;
}

export interface LockerUpdateWithoutClusterDataInput {
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface LockerClusterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LockerClusterWhereInput;
  AND?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
  OR?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
  NOT?:
    | LockerClusterSubscriptionWhereInput[]
    | LockerClusterSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface LockerUpdateWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput;
  data: LockerUpdateWithoutClusterDataInput;
}

export interface LockerUpdateInput {
  cluster?: LockerClusterUpdateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
}

export interface LockerUpdateManyWithoutClusterInput {
  create?: LockerCreateWithoutClusterInput[] | LockerCreateWithoutClusterInput;
  delete?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  connect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  disconnect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
  update?:
    | LockerUpdateWithWhereUniqueWithoutClusterInput[]
    | LockerUpdateWithWhereUniqueWithoutClusterInput;
  upsert?:
    | LockerUpsertWithWhereUniqueWithoutClusterInput[]
    | LockerUpsertWithWhereUniqueWithoutClusterInput;
}

export interface LockerCreateInput {
  cluster?: LockerClusterCreateOneWithoutLockersInput;
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
}

export interface LockerClusterUpdateInput {
  lockers?: LockerUpdateManyWithoutClusterInput;
}

export interface LockerUpsertWithWhereUniqueWithoutClusterInput {
  where: LockerWhereUniqueInput;
  update: LockerUpdateWithoutClusterDataInput;
  create: LockerCreateWithoutClusterInput;
}

export type LockerWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface LockerClusterWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  lockers_every?: LockerWhereInput;
  lockers_some?: LockerWhereInput;
  lockers_none?: LockerWhereInput;
  AND?: LockerClusterWhereInput[] | LockerClusterWhereInput;
  OR?: LockerClusterWhereInput[] | LockerClusterWhereInput;
  NOT?: LockerClusterWhereInput[] | LockerClusterWhereInput;
}

export interface LockerClusterUpdateOneWithoutLockersInput {
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LockerClusterWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
}

export interface LockerClusterCreateInput {
  lockers?: LockerCreateManyWithoutClusterInput;
}

export interface LockerCreateManyWithoutClusterInput {
  create?: LockerCreateWithoutClusterInput[] | LockerCreateWithoutClusterInput;
  connect?: LockerWhereUniqueInput[] | LockerWhereUniqueInput;
}

export interface LockerCreateWithoutClusterInput {
  busy?: Boolean;
  locked?: Boolean;
  open?: Boolean;
}

export interface LockerClusterCreateOneWithoutLockersInput {
  connect?: LockerClusterWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LockerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LockerWhereInput;
  AND?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
  OR?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
  NOT?: LockerSubscriptionWhereInput[] | LockerSubscriptionWhereInput;
}

export type LockerClusterWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LockerPreviousValuesNode {
  id: ID_Output;
  busy: Boolean;
  locked: Boolean;
  open: Boolean;
}

export interface LockerPreviousValues
  extends Promise<LockerPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  busy: () => Promise<Boolean>;
  locked: () => Promise<Boolean>;
  open: () => Promise<Boolean>;
}

export interface LockerPreviousValuesSubscription
  extends Promise<AsyncIterator<LockerPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  busy: () => Promise<AsyncIterator<Boolean>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  open: () => Promise<AsyncIterator<Boolean>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LockerClusterPreviousValuesNode {
  id: ID_Output;
}

export interface LockerClusterPreviousValues
  extends Promise<LockerClusterPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface LockerClusterPreviousValuesSubscription
  extends Promise<AsyncIterator<LockerClusterPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateLockerNode {
  count: Int;
}

export interface AggregateLocker
  extends Promise<AggregateLockerNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLockerSubscription
  extends Promise<AsyncIterator<AggregateLockerNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LockerConnectionNode {}

export interface LockerConnection
  extends Promise<LockerConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LockerEdgeNode>>>() => T;
  aggregate: <T = AggregateLocker>() => T;
}

export interface LockerConnectionSubscription
  extends Promise<AsyncIterator<LockerConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LockerEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLockerSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LockerClusterEdgeNode {
  cursor: String;
}

export interface LockerClusterEdge
  extends Promise<LockerClusterEdgeNode>,
    Fragmentable {
  node: <T = LockerCluster>() => T;
  cursor: () => Promise<String>;
}

export interface LockerClusterEdgeSubscription
  extends Promise<AsyncIterator<LockerClusterEdgeNode>>,
    Fragmentable {
  node: <T = LockerClusterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface LockerNode {
  id: ID_Output;
  busy: Boolean;
  locked: Boolean;
  open: Boolean;
}

export interface Locker extends Promise<LockerNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  cluster: <T = LockerCluster>() => T;
  busy: () => Promise<Boolean>;
  locked: () => Promise<Boolean>;
  open: () => Promise<Boolean>;
}

export interface LockerSubscription
  extends Promise<AsyncIterator<LockerNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cluster: <T = LockerClusterSubscription>() => T;
  busy: () => Promise<AsyncIterator<Boolean>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  open: () => Promise<AsyncIterator<Boolean>>;
}

export interface LockerSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LockerSubscriptionPayload
  extends Promise<LockerSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Locker>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LockerPreviousValues>() => T;
}

export interface LockerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LockerSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LockerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LockerPreviousValuesSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LockerClusterSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LockerClusterSubscriptionPayload
  extends Promise<LockerClusterSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LockerCluster>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LockerClusterPreviousValues>() => T;
}

export interface LockerClusterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LockerClusterSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LockerClusterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LockerClusterPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  name: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LockerEdgeNode {
  cursor: String;
}

export interface LockerEdge extends Promise<LockerEdgeNode>, Fragmentable {
  node: <T = Locker>() => T;
  cursor: () => Promise<String>;
}

export interface LockerEdgeSubscription
  extends Promise<AsyncIterator<LockerEdgeNode>>,
    Fragmentable {
  node: <T = LockerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LockerClusterNode {
  id: ID_Output;
}

export interface LockerCluster
  extends Promise<LockerClusterNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lockers: <T = Promise<Array<LockerNode>>>(
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LockerClusterSubscription
  extends Promise<AsyncIterator<LockerClusterNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lockers: <T = Promise<AsyncIterator<Array<LockerSubscription>>>>(
    args?: {
      where?: LockerWhereInput;
      orderBy?: LockerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LockerClusterConnectionNode {}

export interface LockerClusterConnection
  extends Promise<LockerClusterConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LockerClusterEdgeNode>>>() => T;
  aggregate: <T = AggregateLockerCluster>() => T;
}

export interface LockerClusterConnectionSubscription
  extends Promise<AsyncIterator<LockerClusterConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<LockerClusterEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateLockerClusterSubscription>() => T;
}

export interface AggregateLockerClusterNode {
  count: Int;
}

export interface AggregateLockerCluster
  extends Promise<AggregateLockerClusterNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLockerClusterSubscription
  extends Promise<AsyncIterator<AggregateLockerClusterNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "https://smart-locker-api.herokuapp.com/smart-locker-api/dev"
});
export const prisma = new Prisma();
